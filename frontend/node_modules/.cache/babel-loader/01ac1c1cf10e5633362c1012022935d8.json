{"ast":null,"code":"import _toConsumableArray from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/aaishiuppuluri/my-app/src/App.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport './App.css';\nimport React from 'react';\nimport { useState } from 'react'; // import { Button, Dropdown, Space, Menu, Table, Modal, Form, Input, Popconfirm, InputNumber } from 'antd';\n// import { PlusOutlined, DeleteOutlined, EditOutlined, CheckOutlined, CloseOutlined } from '@ant-design/icons';\n// function App() {\n//   const [data, setData] = useState([]);\n//   const [visible, setVisible] = useState(false);\n//   const { TextArea } = Input;\n//   const [key, setKey] = useState(0);\n//   const [form] = Form.useForm();\n//   const [editingKey, setEditingKey] = useState('');\n//   const EditableCell = ({\n//     editing,\n//     dataIndex,\n//     title,\n//     inputType,\n//     record,\n//     index,\n//     children,\n//     ...restProps\n//   }) => {\n//     const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n//     return (\n//       <td {...restProps}>\n//         {editing ? (\n//           <Form.Item\n//             name={dataIndex}\n//             style={{\n//               margin: 0,\n//             }}\n//             rules={[\n//               {\n//                 required: true,\n//                 message: `Please Input ${title}!`,\n//               },\n//             ]}\n//           >\n//             {inputNode}\n//           </Form.Item>\n//         ) : (\n//           children\n//         )}\n//       </td>\n//     );\n//   };\n//   const isEditing = (record) => record.key === editingKey;\n//   const edit = (record) => {\n//     form.setFieldsValue({\n//       name: '',\n//       age: '',\n//       address: '',\n//       ...record,\n//     });\n//     setEditingKey(record.key);\n//   };\n//   const cancel = () => {\n//     setEditingKey('');\n//   };\n//   const save = async (key) => {\n//     try {\n//       const row = await form.validateFields();\n//       const newData = [...data];\n//       const index = newData.findIndex((item) => key === item.key);\n//       if (index > -1) {\n//         const item = newData[index];\n//         newData.splice(index, 1, { ...item, ...row });\n//         setData(newData);\n//         setEditingKey('');\n//       } else {\n//         newData.push(row);\n//         setData(newData);\n//         setEditingKey('');\n//       }\n//     } catch (errInfo) {\n//       console.log('Validate Failed:', errInfo);\n//     }\n//   };\n//   const onFinish = (values) => {\n//     handleOk();\n//     const newData = {\n//       key: key,\n//       name: values.name,\n//       date: values.date,\n//       status: values.status,\n//       notes: values.notes,\n//     }\n//     setKey(key + 1);\n//     setData(\n//       pre => { return [...pre, newData] }\n//     )\n//   };\n//   const internshipForm = (<Form\n//     name=\"basic\"\n//     labelCol={{\n//       span: 4,\n//     }} s\n//     wrapperCol={{\n//       span: 16,\n//     }}\n//     initialValues={{\n//       remember: true,\n//     }}\n//     onFinish={onFinish}\n//     autoComplete=\"off\"\n//   >\n//     <Form.Item\n//       label=\"Name\"\n//       name=\"name\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please input a name!',\n//         },\n//       ]}\n//     >\n//       <Input />\n//     </Form.Item>\n//     <Form.Item\n//       label=\"Date\"\n//       name=\"date\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please input a date!',\n//         },\n//       ]}\n//     >\n//       <Input />\n//     </Form.Item>\n//     <Form.Item\n//       label=\"Status\"\n//       name=\"status\"\n//       value=\"status\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please input a status!',\n//         },\n//       ]}\n//     >\n//       <Input />\n//     </Form.Item>\n//     <Form.Item\n//       label=\"Notes\"\n//       name=\"notes\"\n//     >\n//       <TextArea rows={4} />\n//     </Form.Item>\n//     <Form.Item\n//       wrapperCol={{\n//         offset: 4,\n//         span: 16,\n//       }}\n//     >\n//       <Button type=\"primary\" htmlType=\"submit\">\n//         Submit\n//       </Button>\n//     </Form.Item>\n//   </Form>);\n//   const [modalText, setModalText] = useState(internshipForm);\n//   const showModal = () => {\n//     setVisible(true);\n//   };\n//   const handleOk = () => {\n//     setModalText('Submitted!');\n//     setTimeout(() => {\n//       setVisible(false);\n//     }, 500);\n//   };\n//   const handleCancel = () => {\n//     setVisible(false);\n//   };\n//   const handleNew = () => {\n//     setModalText(internshipForm);\n//     showModal();\n//   };\n//   const menu = (\n//     <Menu\n//       onClick={handleNew}\n//       items={[\n//         {\n//           label: 'new internship',\n//           key: '1',\n//           icon: <PlusOutlined />,\n//         },\n//       ]}\n//     />\n//   );\n//   const deleteInternship = (record) => {\n//     setData(pre => {\n//       if (pre != null) {\n//         return (pre.filter((it) => it.key !== record.key))\n//       };\n//     })\n//   }\n//   const operationsCol = (_, record) => {\n//     const editable = isEditing(record);\n//     return editable ? (\n//       <span>\n//         <CheckOutlined\n//           onClick={() => save(record.key)}\n//           style={{\n//             marginRight: 8,\n//             fontSize: '20px',\n//             color: 'green'\n//           }}\n//         />\n//         <Popconfirm title=\"Discard changes?\" onConfirm={cancel}>\n//           <CloseOutlined style={{ fontSize: '20px', color: 'red' }} />\n//         </Popconfirm>\n//       </span>\n//     ) : (\n//       <div>\n//         <Space size=\"large\">\n//           <EditOutlined disabled={editingKey !== ''} onClick={() => edit(record)} style={{ fontSize: '20px', color: '#08c' }} />\n//         </Space>\n//         <Popconfirm title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\" onConfirm={() => deleteInternship(record)}>\n//           <DeleteOutlined style={{ fontSize: '20px', color: 'red', marginLeft: '12px' }} />\n//         </Popconfirm>\n//       </div>\n//     );\n//   }\n//   const columns = [\n//     {\n//       title: 'Name',\n//       dataIndex: 'name',\n//       key: '1',\n//     },\n//     {\n//       title: 'Date',\n//       dataIndex: 'date',\n//       key: '2',\n//     },\n//     {\n//       title: 'Status',\n//       dataIndex: 'status',\n//       key: '3',\n//     },\n//     {\n//       title: 'Notes',\n//       dataIndex: 'notes',\n//       key: '4',\n//       ellipsis: true,\n//     },\n//     {\n//       title: '',\n//       key: '5',\n//       render: operationsCol,\n//     }\n//   ];\n//   const mergedColumns = columns.map((col) => {\n//     if (!col.editable) {\n//       return col;\n//     }\n//     return {\n//       ...col,\n//       onCell: (record) => ({\n//         record,\n//         inputType: col.dataIndex === 'age' ? 'number' : 'text',\n//         dataIndex: col.dataIndex,\n//         title: col.title,\n//         editing: isEditing(record),\n//       }),\n//     };\n//   });\n//   return (\n//     <div>\n//       <div className=\"App-header\">\n//         <Dropdown overlay={menu}>\n//           <Button>\n//             <Space>\n//               <PlusOutlined />\n//             </Space>\n//           </Button>\n//         </Dropdown>\n//         <Form form={form} component={false}>\n//           <Table\n//             components={{\n//               body: {\n//                 cell: EditableCell,\n//               },\n//             }}\n//             bordered\n//             dataSource={data}\n//             columns={mergedColumns}\n//             rowClassName=\"editable-row\"\n//             pagination={{\n//               onChange: cancel,\n//             }}\n//           />\n//         </Form>\n//         <Modal\n//           title=\"Add Internship\"\n//           visible={visible}\n//           onCancel={handleCancel}\n//           footer={null}\n//         >\n//           {modalText}\n//         </Modal>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport { Form, InputNumber, Popconfirm, Table, Typography, Input } from 'antd';\nvar originData = [];\n\nfor (var i = 0; i < 100; i++) {\n  x;\n  originData.push({\n    key: i.toString(),\n    name: \"Edrward \".concat(i),\n    age: 32,\n    address: \"London Park no. \".concat(i)\n  });\n}\n\nvar EditableCell = function EditableCell(_ref) {\n  var editing = _ref.editing,\n      dataIndex = _ref.dataIndex,\n      title = _ref.title,\n      inputType = _ref.inputType,\n      record = _ref.record,\n      index = _ref.index,\n      children = _ref.children,\n      restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n  var inputNode = inputType === 'number' ? /*#__PURE__*/React.createElement(InputNumber, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 46\n    }\n  }) : /*#__PURE__*/React.createElement(Input, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 64\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, restProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 5\n    }\n  }), editing ? /*#__PURE__*/React.createElement(Form.Item, {\n    name: dataIndex,\n    style: {\n      margin: 0\n    },\n    rules: [{\n      required: true,\n      message: \"Please Input \".concat(title, \"!\")\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }\n  }, inputNode) : children);\n};\n\nvar App = function App() {\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var _useState = useState(originData),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      editingKey = _useState4[0],\n      setEditingKey = _useState4[1];\n\n  var isEditing = function isEditing(record) {\n    return record.key === editingKey;\n  };\n\n  var edit = function edit(record) {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      age: '',\n      address: ''\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  var cancel = function cancel() {\n    setEditingKey('');\n  };\n\n  var save = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key) {\n      var row, newData, index, item;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return form.validateFields();\n\n            case 3:\n              row = _context.sent;\n              newData = _toConsumableArray(data);\n              index = newData.findIndex(function (item) {\n                return key === item.key;\n              });\n\n              if (index > -1) {\n                item = newData[index];\n                newData.splice(index, 1, _objectSpread({}, item, row));\n                setData(newData);\n                setEditingKey('');\n              } else {\n                newData.push(row);\n                setData(newData);\n                setEditingKey('');\n              }\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log('Validate Failed:', _context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function save(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var columns = [{\n    title: 'name',\n    dataIndex: 'name',\n    width: '25%',\n    editable: true\n  }, {\n    title: 'age',\n    dataIndex: 'age',\n    width: '15%',\n    editable: true\n  }, {\n    title: 'address',\n    dataIndex: 'address',\n    width: '40%',\n    editable: true\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: function render(_, record) {\n      var editable = isEditing(record);\n      return editable ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Typography.Link, {\n        onClick: function onClick() {\n          return save(record.key);\n        },\n        style: {\n          marginRight: 8\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(Popconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: cancel,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 15\n        }\n      }, \"Cancel\"))) : /*#__PURE__*/React.createElement(Typography.Link, {\n        disabled: editingKey !== '',\n        onClick: function onClick() {\n          return edit(record);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }\n      }, \"Edit\");\n    }\n  }];\n  var mergedColumns = columns.map(function (col) {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread({}, col, {\n      onCell: function onCell(record) {\n        return {\n          record: record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record)\n        };\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar ComponentDemo = App;\nReactDOM.render( /*#__PURE__*/React.createElement(ComponentDemo, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 502,\n    columnNumber: 17\n  }\n}), mountNode);\nexport default App;","map":{"version":3,"names":["React","useState","Form","InputNumber","Popconfirm","Table","Typography","Input","originData","i","x","push","key","toString","name","age","address","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","App","useForm","form","data","setData","editingKey","setEditingKey","isEditing","edit","setFieldsValue","cancel","save","validateFields","row","newData","findIndex","item","splice","console","log","columns","width","editable","render","_","marginRight","mergedColumns","map","col","onCell","body","cell","onChange","ComponentDemo","ReactDOM","mountNode"],"sources":["/Users/aaishiuppuluri/my-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React from 'react'\nimport { useState } from 'react';\n// import { Button, Dropdown, Space, Menu, Table, Modal, Form, Input, Popconfirm, InputNumber } from 'antd';\n// import { PlusOutlined, DeleteOutlined, EditOutlined, CheckOutlined, CloseOutlined } from '@ant-design/icons';\n\n// function App() {\n//   const [data, setData] = useState([]);\n//   const [visible, setVisible] = useState(false);\n//   const { TextArea } = Input;\n//   const [key, setKey] = useState(0);\n//   const [form] = Form.useForm();\n//   const [editingKey, setEditingKey] = useState('');\n\n//   const EditableCell = ({\n//     editing,\n//     dataIndex,\n//     title,\n//     inputType,\n//     record,\n//     index,\n//     children,\n//     ...restProps\n//   }) => {\n//     const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n//     return (\n//       <td {...restProps}>\n//         {editing ? (\n//           <Form.Item\n//             name={dataIndex}\n//             style={{\n//               margin: 0,\n//             }}\n//             rules={[\n//               {\n//                 required: true,\n//                 message: `Please Input ${title}!`,\n//               },\n//             ]}\n//           >\n//             {inputNode}\n//           </Form.Item>\n//         ) : (\n//           children\n//         )}\n//       </td>\n//     );\n//   };\n\n//   const isEditing = (record) => record.key === editingKey;\n\n//   const edit = (record) => {\n//     form.setFieldsValue({\n//       name: '',\n//       age: '',\n//       address: '',\n//       ...record,\n//     });\n//     setEditingKey(record.key);\n//   };\n\n//   const cancel = () => {\n//     setEditingKey('');\n//   };\n\n//   const save = async (key) => {\n//     try {\n//       const row = await form.validateFields();\n//       const newData = [...data];\n//       const index = newData.findIndex((item) => key === item.key);\n\n//       if (index > -1) {\n//         const item = newData[index];\n//         newData.splice(index, 1, { ...item, ...row });\n//         setData(newData);\n//         setEditingKey('');\n//       } else {\n//         newData.push(row);\n//         setData(newData);\n//         setEditingKey('');\n//       }\n//     } catch (errInfo) {\n//       console.log('Validate Failed:', errInfo);\n//     }\n//   };\n\n//   const onFinish = (values) => {\n//     handleOk();\n//     const newData = {\n//       key: key,\n//       name: values.name,\n//       date: values.date,\n//       status: values.status,\n//       notes: values.notes,\n//     }\n//     setKey(key + 1);\n//     setData(\n//       pre => { return [...pre, newData] }\n//     )\n//   };\n\n//   const internshipForm = (<Form\n//     name=\"basic\"\n//     labelCol={{\n//       span: 4,\n//     }} s\n//     wrapperCol={{\n//       span: 16,\n//     }}\n//     initialValues={{\n//       remember: true,\n//     }}\n//     onFinish={onFinish}\n//     autoComplete=\"off\"\n//   >\n//     <Form.Item\n//       label=\"Name\"\n//       name=\"name\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please input a name!',\n//         },\n//       ]}\n//     >\n//       <Input />\n//     </Form.Item>\n\n//     <Form.Item\n//       label=\"Date\"\n//       name=\"date\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please input a date!',\n//         },\n//       ]}\n//     >\n//       <Input />\n//     </Form.Item>\n\n//     <Form.Item\n//       label=\"Status\"\n//       name=\"status\"\n//       value=\"status\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please input a status!',\n//         },\n//       ]}\n//     >\n//       <Input />\n//     </Form.Item>\n\n//     <Form.Item\n//       label=\"Notes\"\n//       name=\"notes\"\n//     >\n//       <TextArea rows={4} />\n//     </Form.Item>\n\n//     <Form.Item\n//       wrapperCol={{\n//         offset: 4,\n//         span: 16,\n//       }}\n//     >\n//       <Button type=\"primary\" htmlType=\"submit\">\n//         Submit\n//       </Button>\n//     </Form.Item>\n//   </Form>);\n\n//   const [modalText, setModalText] = useState(internshipForm);\n\n//   const showModal = () => {\n//     setVisible(true);\n//   };\n\n//   const handleOk = () => {\n//     setModalText('Submitted!');\n//     setTimeout(() => {\n//       setVisible(false);\n//     }, 500);\n//   };\n\n//   const handleCancel = () => {\n//     setVisible(false);\n//   };\n\n//   const handleNew = () => {\n//     setModalText(internshipForm);\n//     showModal();\n//   };\n//   const menu = (\n//     <Menu\n//       onClick={handleNew}\n//       items={[\n//         {\n//           label: 'new internship',\n//           key: '1',\n//           icon: <PlusOutlined />,\n//         },\n//       ]}\n//     />\n//   );\n//   const deleteInternship = (record) => {\n//     setData(pre => {\n//       if (pre != null) {\n//         return (pre.filter((it) => it.key !== record.key))\n//       };\n//     })\n//   }\n//   const operationsCol = (_, record) => {\n//     const editable = isEditing(record);\n//     return editable ? (\n//       <span>\n//         <CheckOutlined\n//           onClick={() => save(record.key)}\n//           style={{\n//             marginRight: 8,\n//             fontSize: '20px',\n//             color: 'green'\n//           }}\n//         />\n//         <Popconfirm title=\"Discard changes?\" onConfirm={cancel}>\n//           <CloseOutlined style={{ fontSize: '20px', color: 'red' }} />\n//         </Popconfirm>\n//       </span>\n//     ) : (\n//       <div>\n//         <Space size=\"large\">\n//           <EditOutlined disabled={editingKey !== ''} onClick={() => edit(record)} style={{ fontSize: '20px', color: '#08c' }} />\n//         </Space>\n//         <Popconfirm title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\" onConfirm={() => deleteInternship(record)}>\n//           <DeleteOutlined style={{ fontSize: '20px', color: 'red', marginLeft: '12px' }} />\n//         </Popconfirm>\n//       </div>\n//     );\n//   }\n//   const columns = [\n//     {\n//       title: 'Name',\n//       dataIndex: 'name',\n//       key: '1',\n//     },\n//     {\n//       title: 'Date',\n//       dataIndex: 'date',\n//       key: '2',\n//     },\n//     {\n//       title: 'Status',\n//       dataIndex: 'status',\n//       key: '3',\n//     },\n//     {\n//       title: 'Notes',\n//       dataIndex: 'notes',\n//       key: '4',\n//       ellipsis: true,\n//     },\n//     {\n//       title: '',\n//       key: '5',\n//       render: operationsCol,\n//     }\n//   ];\n\n\n//   const mergedColumns = columns.map((col) => {\n//     if (!col.editable) {\n//       return col;\n//     }\n\n//     return {\n//       ...col,\n//       onCell: (record) => ({\n//         record,\n//         inputType: col.dataIndex === 'age' ? 'number' : 'text',\n//         dataIndex: col.dataIndex,\n//         title: col.title,\n//         editing: isEditing(record),\n//       }),\n//     };\n//   });\n//   return (\n//     <div>\n//       <div className=\"App-header\">\n//         <Dropdown overlay={menu}>\n//           <Button>\n//             <Space>\n//               <PlusOutlined />\n//             </Space>\n//           </Button>\n//         </Dropdown>\n//         <Form form={form} component={false}>\n//           <Table\n//             components={{\n//               body: {\n//                 cell: EditableCell,\n//               },\n//             }}\n//             bordered\n//             dataSource={data}\n//             columns={mergedColumns}\n//             rowClassName=\"editable-row\"\n//             pagination={{\n//               onChange: cancel,\n//             }}\n//           />\n//         </Form>\n//         <Modal\n//           title=\"Add Internship\"\n//           visible={visible}\n//           onCancel={handleCancel}\n//           footer={null}\n//         >\n//           {modalText}\n//         </Modal>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport { Form, InputNumber, Popconfirm, Table, Typography, Input } from 'antd';\nconst originData = [];\n\nfor (let i = 0; i < 100; i++) {\n  x\n  originData.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{\n            margin: 0,\n          }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst App = () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = (record) => record.key === editingKey;\n\n  const edit = (record) => {\n    form.setFieldsValue({\n      name: '',\n      age: '',\n      address: '',\n      ...record,\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async (key) => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex((item) => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      editable: true,\n    },\n    {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      editable: true,\n    },\n    {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      editable: true,\n    },\n    {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (_, record) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <Typography.Link\n              onClick={() => save(record.key)}\n              style={{\n                marginRight: 8,\n              }}\n            >\n              Save\n            </Typography.Link>\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </Popconfirm>\n          </span>\n        ) : (\n          <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\n            Edit\n          </Typography.Link>\n        );\n      },\n    },\n  ];\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: (record) => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n  return (\n    <Form form={form} component={false}>\n      <Table\n        components={{\n          body: {\n            cell: EditableCell,\n          },\n        }}\n        bordered\n        dataSource={data}\n        columns={mergedColumns}\n        rowClassName=\"editable-row\"\n        pagination={{\n          onChange: cancel,\n        }}\n      />\n    </Form>\n  );\n};\n\nconst ComponentDemo = App;\n\n\nReactDOM.render(<ComponentDemo />, mountNode);\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}