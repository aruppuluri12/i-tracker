{"ast":null,"code":"import _toConsumableArray from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/aaishiuppuluri/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/aaishiuppuluri/my-app/src/Intern.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n// import './App.css';\n// import React from 'react'\n// import { useState } from 'react';\n// import { Button, Space, Table, Modal, Form, Input, Popconfirm, Tooltip, DatePicker, Select } from 'antd';\nimport { PlusOutlined, DeleteOutlined, EditOutlined, CheckOutlined, CloseOutlined } from '@ant-design/icons'; // import moment from 'moment';\n// const Intern = () => {\n//   const [internData, setInternData] = useState([]);\n//   const [visible, setVisible] = useState(false);\n//   const { TextArea } = Input;\n//   const [key, setKey] = useState(0);\n//   const [form] = Form.useForm();\n//   const [editingKey, setEditingKey] = useState('');\n//   const { Option } = Select;\n//   const onDateChange = (date, dateString) => {\n//     console.log(date, dateString);\n//   };\n//   const EditableCell = ({\n//     editing,\n//     dataIndex,\n//     title,\n//     inputType,\n//     record,\n//     index,\n//     children,\n//     ...restProps\n//   }) => {\n//     const dateFormat = \"MM/DD/YYYY\";\n//     const inputNode = dataIndex === 'notes' ? <TextArea /> : (dataIndex === 'status' ? <Select defaultValue=\"New\">\n//       <Option value=\"New\">Yet to Apply</Option>\n//       <Option value=\"Applied\">Applied</Option>\n//       <Option value=\"Interviewed\">Interviewed</Option>\n//       <Option value=\"Accepted\">Accepted</Option>\n//       <Option value=\"Rejected\">Rejected</Option>\n//     </Select> : (dataIndex === 'date' ? <DatePicker format={dateFormat} /> : <Input />));\n//     const req = dataIndex === 'notes' ? false : true;\n//     return (\n//       <td {...restProps}>\n//         {editing ? (\n//           <Form.Item\n//             name={dataIndex}\n//             style={{\n//               margin: 0,\n//             }}\n//             rules={[\n//               {\n//                 required: req,\n//                 message: `Please input ${title}!`,\n//               },\n//             ]}\n//           >\n//             {inputNode}\n//           </Form.Item>\n//         ) : (\n//           children\n//         )}\n//       </td>\n//     );\n//   };\n//   const isEditing = (record) => record.key === editingKey;\n//   const edit = (record) => {\n//     form.setFieldsValue({\n//       name: '',\n//       date: '',\n//       status: '',\n//       notes: '',\n//       ...record,\n//     });\n//     setEditingKey(record.key);\n//   };\n//   const cancel = () => {\n//     setEditingKey('');\n//   };\n//   const save = async (key) => {\n//     try {\n//       const row = await form.validateFields();\n//       const newData = [...internData];\n//       const index = newData.findIndex((item) => key === item.key);\n//       if (index > -1) {\n//         const item = newData[index];\n//         newData.splice(index, 1, { ...item, ...row });\n//         setInternData(newData);\n//         setEditingKey('');\n//       } else {\n//         newData.push(row);\n//         setInternData(newData);\n//         setEditingKey('');\n//       }\n//     } catch (errInfo) {\n//       console.log('Validate Failed:', errInfo);\n//     }\n//   };\n//   const monthToDate = (month) => {\n//     if (month === 'Jan') return '01';\n//     if (month === 'Feb') return '02';\n//     if (month === 'Mar') return '03';\n//     if (month === 'Apr') return '04';\n//     if (month === 'May') return '05';\n//     if (month === 'Jun') return '06';\n//     if (month === 'Jul') return '07';\n//     if (month === 'Aug') return '08';\n//     if (month === 'Sep') return '09';\n//     if (month === 'Oct') return '10';\n//     if (month === 'Nov') return '11';\n//     return '12';\n//   }\n//   const processDate = (date) => {\n//     var month = monthToDate(date.toString().substring(4, 7));\n//     var day = date.toString().substring(8, 10);\n//     var year = date.toString().substring(11, 15);\n//     return month + \"/\" + day + \"/\" + year;\n//   }\n//   const onFinish = (values) => {\n//     handleOk();\n//     const newData = {\n//       key: key,\n//       name: values.name,\n//       date: processDate(values.date._d),\n//       status: values.status,\n//       notes: values.notes,\n//     }\n//     setKey(key + 1);\n//     setInternData(\n//       pre => { return [...pre, newData] }\n//     )\n//   };\n//   const internshipForm = (<Form\n//     name=\"basic\"\n//     labelCol={{\n//       span: 4,\n//     }} s\n//     wrapperCol={{\n//       span: 16,\n//     }}\n//     initialValues={{\n//       remember: true,\n//     }}\n//     onFinish={onFinish}\n//     autoComplete=\"off\"\n//   >\n//     <Form.Item\n//       label=\"Name\"\n//       name=\"name\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please input a name!',\n//         },\n//       ]}\n//     >\n//       <Input />\n//     </Form.Item>\n//     <Form.Item\n//       label=\"Date\"\n//       name=\"date\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please select a date!',\n//         },\n//       ]}\n//     >\n//       <DatePicker onChange={onDateChange} />\n//     </Form.Item>\n//     <Form.Item\n//       label=\"Status\"\n//       name=\"status\"\n//       value=\"status\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please select a status!',\n//         },\n//       ]}\n//     >\n//       <Select defaultValue=\"New\">\n//         <Option value=\"New\">New</Option>\n//         <Option value=\"Applied\">Applied</Option>\n//         <Option value=\"Interviewed\">Interviewed</Option>\n//         <Option value=\"Accepted\">Accepted</Option>\n//         <Option value=\"Rejected\">Rejected</Option>\n//       </Select>\n//     </Form.Item>\n//     <Form.Item\n//       label=\"Notes\"\n//       name=\"notes\"\n//     >\n//       <TextArea rows={4} />\n//     </Form.Item>\n//     <Form.Item\n//       wrapperCol={{\n//         offset: 4,\n//         span: 16,\n//       }}\n//     >\n//       <Button type=\"primary\" htmlType=\"submit\">\n//         Submit\n//       </Button>\n//     </Form.Item>\n//   </Form>);\n//   const [modalText, setModalText] = useState(internshipForm);\n//   const showModal = () => {\n//     setVisible(true);\n//   };\n//   const handleOk = () => {\n//     setModalText('Submitted!');\n//     setTimeout(() => {\n//       setVisible(false);\n//     }, 500);\n//   };\n//   const handleCancel = () => {\n//     setVisible(false);\n//   };\n//   const handleNew = () => {\n//     setModalText(internshipForm);\n//     showModal();\n//   };\n//   const deleteInternship = (record) => {\n//     setInternData(pre => {\n//       if (pre != null) {\n//         return (pre.filter((it) => it.key !== record.key))\n//       };\n//     })\n//   }\n//   const operationsCol = (_, record) => {\n//     const editable = isEditing(record);\n//     return editable ? (\n//       <span>\n//         <CheckOutlined\n//           onClick={() => save(record.key)}\n//           style={{\n//             marginRight: 8,\n//             fontSize: '20px',\n//             color: 'green'\n//           }}\n//         />\n//         <Popconfirm title=\"Discard changes?\" onConfirm={cancel}>\n//           <CloseOutlined style={{ fontSize: '20px', color: 'red' }} />\n//         </Popconfirm>\n//       </span>\n//     ) : (\n//       <div>\n//         <Space size=\"large\">\n//           <EditOutlined disabled={editingKey !== ''} onClick={() => edit(record)} style={{ fontSize: '20px', color: '#08c' }} />\n//         </Space>\n//         <Popconfirm title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\" onConfirm={() => deleteInternship(record)}>\n//           <DeleteOutlined style={{ fontSize: '20px', color: 'red', marginLeft: '12px' }} />\n//         </Popconfirm>\n//       </div>\n//     );\n//   }\n//   const columns = [\n//     {\n//       title: 'Name',\n//       dataIndex: 'name',\n//       sorter: (a, b) => { if (a.name < b.name) return -1; if (a.name > b.name) return 1; return 0; },\n//       key: '1',\n//       editable: true\n//     },\n//     {\n//       title: 'Date',\n//       dataIndex: 'date',\n//       key: '2',\n//       render: (_, record) => new Date(record.date._i).toLocaleDateString('en-US'),\n//       editable: true\n//     },\n//     {\n//       title: 'Status',\n//       dataIndex: 'status',\n//       key: '3',\n//       editable: true\n//     },\n//     {\n//       title: 'Notes',\n//       dataIndex: 'notes',\n//       key: '4',\n//       ellipsis: true,\n//       editable: true,\n//       render: (address => (\n//         <Tooltip placement=\"topLeft\" title={address}>\n//           {address}\n//         </Tooltip>)),\n//     },\n//     {\n//       title: '',\n//       key: '5',\n//       render: operationsCol,\n//     }\n//   ];\n//   const mergedColumns = columns.map((col) => {\n//     if (!col.editable) {\n//       return col;\n//     }\n//     return {\n//       ...col,\n//       onCell: (record) => ({\n//         record,\n//         inputType: col.dataIndex === 'age' ? 'number' : 'text',\n//         dataIndex: col.dataIndex,\n//         title: col.title,\n//         editing: isEditing(record),\n//       }),\n//     };\n//   });\n//   return (\n//     <div className=\"buttons\">\n//       <Button onClick={handleNew}>\n//         <Space>\n//           <PlusOutlined />\n//         </Space>\n//       </Button>\n//       <Form form={form} component={false}>\n//         <Table\n//           components={{\n//             body: {\n//               cell: EditableCell,\n//             },\n//           }}\n//           bordered\n//           dataSource={internData}\n//           columns={mergedColumns}\n//           rowClassName=\"editable-row\"\n//           pagination={{\n//             onChange: cancel,\n//           }}\n//         />\n//       </Form>\n//       <Modal\n//         title=\"Add Internship\"\n//         visible={visible}\n//         onCancel={handleCancel}\n//         footer={null}\n//       >\n//         {modalText}\n//       </Modal>\n//     </div>\n//   );\n// }\n// export default Intern;\n\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Table, Popconfirm, Form, Typography, DatePicker, Space, Tooltip, Select, Input } from \"antd\";\nvar originData = [];\nvar Option = Select.Option;\nvar TextArea = Input.TextArea;\n\nfor (var i = 0; i < 2; i++) {\n  originData.push({\n    key: i.toString(),\n    name: \"name\" + i.toString(),\n    date: moment(\"2012-01-11T12:32:26.551Z\", moment.ISO_8601),\n    status: \"New\",\n    notes: \"none\"\n  });\n}\n\nvar EditableCell = function EditableCell(_ref) {\n  var editing = _ref.editing,\n      dataIndex = _ref.dataIndex,\n      title = _ref.title,\n      inputType = _ref.inputType,\n      record = _ref.record,\n      index = _ref.index,\n      children = _ref.children,\n      restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n  var dateFormat = \"MM/DD/YYYY\";\n  var inputNode = dataIndex === 'notes' ? /*#__PURE__*/React.createElement(TextArea, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 45\n    }\n  }) : dataIndex === 'status' ? /*#__PURE__*/React.createElement(Select, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 86\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"New\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 5\n    }\n  }, \"Yet to Apply\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"Applied\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 5\n    }\n  }, \"Applied\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"Interviewed\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 5\n    }\n  }, \"Interviewed\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"Accepted\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 5\n    }\n  }, \"Accepted\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"Rejected\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 5\n    }\n  }, \"Rejected\")) : dataIndex === 'date' ? /*#__PURE__*/React.createElement(DatePicker, {\n    format: dateFormat,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 39\n    }\n  }) : /*#__PURE__*/React.createElement(Input, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 76\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, restProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 5\n    }\n  }), editing ? /*#__PURE__*/React.createElement(Form.Item, {\n    name: dataIndex,\n    style: {\n      margin: 0\n    },\n    rules: [{\n      required: true,\n      message: \"Please Input \".concat(title, \"!\")\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }\n  }, inputNode) : children);\n};\n\nvar EditableTable = function EditableTable() {\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var _useState = useState(originData),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      editingKey = _useState4[0],\n      setEditingKey = _useState4[1];\n\n  var isEditing = function isEditing(record) {\n    return record.key === editingKey;\n  };\n\n  var edit = function edit(record) {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      date: '',\n      status: '',\n      notes: ''\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  var cancel = function cancel() {\n    setEditingKey(\"\");\n  };\n\n  var save = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key) {\n      var row, newData, index, item;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return form.validateFields();\n\n            case 3:\n              row = _context.sent;\n              newData = _toConsumableArray(data);\n              index = newData.findIndex(function (item) {\n                return key === item.key;\n              });\n\n              if (index > -1) {\n                item = newData[index];\n                newData.splice(index, 1, _objectSpread({}, item, row));\n                setData(newData);\n                setEditingKey(\"\");\n              } else {\n                newData.push(row);\n                setData(newData);\n                setEditingKey(\"\");\n              }\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(\"Validate Failed:\", _context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function save(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var deleteInternship = function deleteInternship(record) {\n    setData(function (pre) {\n      if (pre != null) {\n        return pre.filter(function (it) {\n          return it.key !== record.key;\n        });\n      }\n\n      ;\n    });\n  };\n\n  var operationsCol = function operationsCol(_, record) {\n    var editable = isEditing(record);\n    return editable ? /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CheckOutlined, {\n      onClick: function onClick() {\n        return save(record.key);\n      },\n      style: {\n        marginRight: 8,\n        fontSize: '20px',\n        color: 'green'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Discard changes?\",\n      onConfirm: cancel,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CloseOutlined, {\n      style: {\n        fontSize: '20px',\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }\n    }))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Space, {\n      size: \"large\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EditOutlined, {\n      disabled: editingKey !== '',\n      onClick: function onClick() {\n        return edit(record);\n      },\n      style: {\n        fontSize: '20px',\n        color: '#08c'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Are you sure?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: function onConfirm() {\n        return deleteInternship(record);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DeleteOutlined, {\n      style: {\n        fontSize: '20px',\n        color: 'red',\n        marginLeft: '12px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  var columns = [{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: function sorter(a, b) {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n      return 0;\n    },\n    key: '1',\n    editable: true\n  }, {\n    title: 'Date',\n    dataIndex: 'date',\n    key: '2',\n    render: function render(_, record) {\n      return new Date(record.date._i).toLocaleDateString('en-US');\n    },\n    editable: true\n  }, {\n    title: 'Status',\n    dataIndex: 'status',\n    key: '3',\n    editable: true\n  }, {\n    title: 'Notes',\n    dataIndex: 'notes',\n    key: '4',\n    ellipsis: true,\n    editable: true,\n    render: function render(address) {\n      return /*#__PURE__*/React.createElement(Tooltip, {\n        placement: \"topLeft\",\n        title: address,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 9\n        }\n      }, address);\n    }\n  }, {\n    title: '',\n    key: '5',\n    render: operationsCol\n  }];\n  var mergedColumns = columns.map(function (col) {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread({}, col, {\n      onCell: function onCell(record) {\n        return {\n          record: record,\n          inputType: col.dataIndex,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record)\n        };\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EditableTable;","map":{"version":3,"names":["PlusOutlined","DeleteOutlined","EditOutlined","CheckOutlined","CloseOutlined","React","useState","moment","ReactDOM","Table","Popconfirm","Form","Typography","DatePicker","Space","Tooltip","Select","Input","originData","Option","TextArea","i","push","key","toString","name","date","ISO_8601","status","notes","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","dateFormat","inputNode","margin","required","message","EditableTable","useForm","form","data","setData","editingKey","setEditingKey","isEditing","edit","setFieldsValue","cancel","save","validateFields","row","newData","findIndex","item","splice","console","log","deleteInternship","pre","filter","it","operationsCol","_","editable","marginRight","fontSize","color","marginLeft","columns","sorter","a","b","render","Date","_i","toLocaleDateString","ellipsis","address","mergedColumns","map","col","onCell","body","cell","onChange"],"sources":["/Users/aaishiuppuluri/my-app/src/Intern.js"],"sourcesContent":["// import './App.css';\n// import React from 'react'\n// import { useState } from 'react';\n// import { Button, Space, Table, Modal, Form, Input, Popconfirm, Tooltip, DatePicker, Select } from 'antd';\nimport { PlusOutlined, DeleteOutlined, EditOutlined, CheckOutlined, CloseOutlined } from '@ant-design/icons';\n// import moment from 'moment';\n\n// const Intern = () => {\n//   const [internData, setInternData] = useState([]);\n//   const [visible, setVisible] = useState(false);\n//   const { TextArea } = Input;\n//   const [key, setKey] = useState(0);\n//   const [form] = Form.useForm();\n//   const [editingKey, setEditingKey] = useState('');\n\n//   const { Option } = Select;\n//   const onDateChange = (date, dateString) => {\n//     console.log(date, dateString);\n//   };\n\n//   const EditableCell = ({\n//     editing,\n//     dataIndex,\n//     title,\n//     inputType,\n//     record,\n//     index,\n//     children,\n//     ...restProps\n//   }) => {\n//     const dateFormat = \"MM/DD/YYYY\";\n//     const inputNode = dataIndex === 'notes' ? <TextArea /> : (dataIndex === 'status' ? <Select defaultValue=\"New\">\n//       <Option value=\"New\">Yet to Apply</Option>\n//       <Option value=\"Applied\">Applied</Option>\n//       <Option value=\"Interviewed\">Interviewed</Option>\n//       <Option value=\"Accepted\">Accepted</Option>\n//       <Option value=\"Rejected\">Rejected</Option>\n//     </Select> : (dataIndex === 'date' ? <DatePicker format={dateFormat} /> : <Input />));\n//     const req = dataIndex === 'notes' ? false : true;\n//     return (\n//       <td {...restProps}>\n//         {editing ? (\n//           <Form.Item\n//             name={dataIndex}\n//             style={{\n//               margin: 0,\n//             }}\n//             rules={[\n//               {\n//                 required: req,\n//                 message: `Please input ${title}!`,\n//               },\n//             ]}\n//           >\n//             {inputNode}\n//           </Form.Item>\n//         ) : (\n//           children\n//         )}\n//       </td>\n//     );\n//   };\n\n//   const isEditing = (record) => record.key === editingKey;\n\n//   const edit = (record) => {\n//     form.setFieldsValue({\n//       name: '',\n//       date: '',\n//       status: '',\n//       notes: '',\n//       ...record,\n//     });\n//     setEditingKey(record.key);\n//   };\n\n//   const cancel = () => {\n//     setEditingKey('');\n//   };\n\n//   const save = async (key) => {\n//     try {\n//       const row = await form.validateFields();\n//       const newData = [...internData];\n//       const index = newData.findIndex((item) => key === item.key);\n\n//       if (index > -1) {\n//         const item = newData[index];\n//         newData.splice(index, 1, { ...item, ...row });\n//         setInternData(newData);\n//         setEditingKey('');\n//       } else {\n//         newData.push(row);\n//         setInternData(newData);\n//         setEditingKey('');\n//       }\n//     } catch (errInfo) {\n//       console.log('Validate Failed:', errInfo);\n//     }\n//   };\n\n//   const monthToDate = (month) => {\n//     if (month === 'Jan') return '01';\n//     if (month === 'Feb') return '02';\n//     if (month === 'Mar') return '03';\n//     if (month === 'Apr') return '04';\n//     if (month === 'May') return '05';\n//     if (month === 'Jun') return '06';\n//     if (month === 'Jul') return '07';\n//     if (month === 'Aug') return '08';\n//     if (month === 'Sep') return '09';\n//     if (month === 'Oct') return '10';\n//     if (month === 'Nov') return '11';\n//     return '12';\n//   }\n//   const processDate = (date) => {\n//     var month = monthToDate(date.toString().substring(4, 7));\n//     var day = date.toString().substring(8, 10);\n//     var year = date.toString().substring(11, 15);\n//     return month + \"/\" + day + \"/\" + year;\n//   }\n\n//   const onFinish = (values) => {\n//     handleOk();\n//     const newData = {\n//       key: key,\n//       name: values.name,\n//       date: processDate(values.date._d),\n//       status: values.status,\n//       notes: values.notes,\n//     }\n//     setKey(key + 1);\n//     setInternData(\n//       pre => { return [...pre, newData] }\n//     )\n//   };\n\n//   const internshipForm = (<Form\n//     name=\"basic\"\n//     labelCol={{\n//       span: 4,\n//     }} s\n//     wrapperCol={{\n//       span: 16,\n//     }}\n//     initialValues={{\n//       remember: true,\n//     }}\n//     onFinish={onFinish}\n//     autoComplete=\"off\"\n//   >\n//     <Form.Item\n//       label=\"Name\"\n//       name=\"name\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please input a name!',\n//         },\n//       ]}\n//     >\n//       <Input />\n//     </Form.Item>\n\n//     <Form.Item\n//       label=\"Date\"\n//       name=\"date\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please select a date!',\n//         },\n//       ]}\n//     >\n//       <DatePicker onChange={onDateChange} />\n//     </Form.Item>\n\n//     <Form.Item\n//       label=\"Status\"\n//       name=\"status\"\n//       value=\"status\"\n//       rules={[\n//         {\n//           required: true,\n//           message: 'Please select a status!',\n//         },\n//       ]}\n//     >\n//       <Select defaultValue=\"New\">\n//         <Option value=\"New\">New</Option>\n//         <Option value=\"Applied\">Applied</Option>\n//         <Option value=\"Interviewed\">Interviewed</Option>\n//         <Option value=\"Accepted\">Accepted</Option>\n//         <Option value=\"Rejected\">Rejected</Option>\n//       </Select>\n//     </Form.Item>\n\n//     <Form.Item\n//       label=\"Notes\"\n//       name=\"notes\"\n//     >\n//       <TextArea rows={4} />\n//     </Form.Item>\n\n//     <Form.Item\n//       wrapperCol={{\n//         offset: 4,\n//         span: 16,\n//       }}\n//     >\n//       <Button type=\"primary\" htmlType=\"submit\">\n//         Submit\n//       </Button>\n//     </Form.Item>\n//   </Form>);\n\n//   const [modalText, setModalText] = useState(internshipForm);\n\n//   const showModal = () => {\n//     setVisible(true);\n//   };\n\n//   const handleOk = () => {\n//     setModalText('Submitted!');\n//     setTimeout(() => {\n//       setVisible(false);\n//     }, 500);\n//   };\n\n//   const handleCancel = () => {\n//     setVisible(false);\n//   };\n\n//   const handleNew = () => {\n//     setModalText(internshipForm);\n//     showModal();\n//   };\n//   const deleteInternship = (record) => {\n//     setInternData(pre => {\n//       if (pre != null) {\n//         return (pre.filter((it) => it.key !== record.key))\n//       };\n//     })\n//   }\n//   const operationsCol = (_, record) => {\n//     const editable = isEditing(record);\n//     return editable ? (\n//       <span>\n//         <CheckOutlined\n//           onClick={() => save(record.key)}\n//           style={{\n//             marginRight: 8,\n//             fontSize: '20px',\n//             color: 'green'\n//           }}\n//         />\n//         <Popconfirm title=\"Discard changes?\" onConfirm={cancel}>\n//           <CloseOutlined style={{ fontSize: '20px', color: 'red' }} />\n//         </Popconfirm>\n//       </span>\n//     ) : (\n//       <div>\n//         <Space size=\"large\">\n//           <EditOutlined disabled={editingKey !== ''} onClick={() => edit(record)} style={{ fontSize: '20px', color: '#08c' }} />\n//         </Space>\n//         <Popconfirm title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\" onConfirm={() => deleteInternship(record)}>\n//           <DeleteOutlined style={{ fontSize: '20px', color: 'red', marginLeft: '12px' }} />\n//         </Popconfirm>\n//       </div>\n//     );\n//   }\n//   const columns = [\n//     {\n//       title: 'Name',\n//       dataIndex: 'name',\n//       sorter: (a, b) => { if (a.name < b.name) return -1; if (a.name > b.name) return 1; return 0; },\n//       key: '1',\n//       editable: true\n//     },\n//     {\n//       title: 'Date',\n//       dataIndex: 'date',\n//       key: '2',\n//       render: (_, record) => new Date(record.date._i).toLocaleDateString('en-US'),\n//       editable: true\n//     },\n//     {\n//       title: 'Status',\n//       dataIndex: 'status',\n//       key: '3',\n//       editable: true\n//     },\n//     {\n//       title: 'Notes',\n//       dataIndex: 'notes',\n//       key: '4',\n//       ellipsis: true,\n//       editable: true,\n//       render: (address => (\n//         <Tooltip placement=\"topLeft\" title={address}>\n//           {address}\n//         </Tooltip>)),\n//     },\n//     {\n//       title: '',\n//       key: '5',\n//       render: operationsCol,\n//     }\n//   ];\n\n\n//   const mergedColumns = columns.map((col) => {\n//     if (!col.editable) {\n//       return col;\n//     }\n\n//     return {\n//       ...col,\n//       onCell: (record) => ({\n//         record,\n//         inputType: col.dataIndex === 'age' ? 'number' : 'text',\n//         dataIndex: col.dataIndex,\n//         title: col.title,\n//         editing: isEditing(record),\n//       }),\n//     };\n//   });\n\n\n//   return (\n//     <div className=\"buttons\">\n//       <Button onClick={handleNew}>\n//         <Space>\n//           <PlusOutlined />\n//         </Space>\n//       </Button>\n//       <Form form={form} component={false}>\n//         <Table\n//           components={{\n//             body: {\n//               cell: EditableCell,\n//             },\n//           }}\n//           bordered\n//           dataSource={internData}\n//           columns={mergedColumns}\n//           rowClassName=\"editable-row\"\n//           pagination={{\n//             onChange: cancel,\n//           }}\n//         />\n//       </Form>\n//       <Modal\n//         title=\"Add Internship\"\n//         visible={visible}\n//         onCancel={handleCancel}\n//         footer={null}\n//       >\n//         {modalText}\n//       </Modal>\n//     </div>\n//   );\n\n// }\n\n// export default Intern;\n\n\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Table, Popconfirm, Form, Typography, DatePicker, Space, Tooltip, Select, Input } from \"antd\";\nconst originData = [];\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nfor (let i = 0; i < 2; i++) {\n  originData.push({\n    key: i.toString(),\n    name: \"name\" + i.toString(),\n    date: moment(\"2012-01-11T12:32:26.551Z\", moment.ISO_8601),\n    status: \"New\",\n    notes: \"none\"\n  })\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const dateFormat = \"MM/DD/YYYY\";\n  const inputNode = dataIndex === 'notes' ? <TextArea /> : (dataIndex === 'status' ? <Select >\n    <Option value=\"New\">Yet to Apply</Option>\n    <Option value=\"Applied\">Applied</Option>\n    <Option value=\"Interviewed\">Interviewed</Option>\n    <Option value=\"Accepted\">Accepted</Option>\n    <Option value=\"Rejected\">Rejected</Option>\n  </Select> : (dataIndex === 'date' ? <DatePicker format={dateFormat} /> : <Input />));\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{\n            margin: 0\n          }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`\n            }\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst EditableTable = () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState(\"\");\n\n  const isEditing = (record) => record.key === editingKey;\n\n  const edit = (record) => {\n    form.setFieldsValue({\n      name: '',\n      date: '',\n      status: '',\n      notes: '',\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async (key) => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex((item) => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setData(newData);\n        setEditingKey(\"\");\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey(\"\");\n      }\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n  const deleteInternship = (record) => {\n    setData(pre => {\n      if (pre != null) {\n        return (pre.filter((it) => it.key !== record.key))\n      };\n    })\n  }\n  const operationsCol = (_, record) => {\n    const editable = isEditing(record);\n    return editable ? (\n      <span>\n        <CheckOutlined\n          onClick={() => save(record.key)}\n          style={{\n            marginRight: 8,\n            fontSize: '20px',\n            color: 'green'\n          }}\n        />\n        <Popconfirm title=\"Discard changes?\" onConfirm={cancel}>\n          <CloseOutlined style={{ fontSize: '20px', color: 'red' }} />\n        </Popconfirm>\n      </span>\n    ) : (\n      <div>\n        <Space size=\"large\">\n          <EditOutlined disabled={editingKey !== ''} onClick={() => edit(record)} style={{ fontSize: '20px', color: '#08c' }} />\n        </Space>\n        <Popconfirm title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\" onConfirm={() => deleteInternship(record)}>\n          <DeleteOutlined style={{ fontSize: '20px', color: 'red', marginLeft: '12px' }} />\n        </Popconfirm>\n      </div>\n    );\n  }\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      sorter: (a, b) => { if (a.name < b.name) return -1; if (a.name > b.name) return 1; return 0; },\n      key: '1',\n      editable: true\n    },\n    {\n      title: 'Date',\n      dataIndex: 'date',\n      key: '2',\n      render: (_, record) => new Date(record.date._i).toLocaleDateString('en-US'),\n      editable: true\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: '3',\n      editable: true\n    },\n    {\n      title: 'Notes',\n      dataIndex: 'notes',\n      key: '4',\n      ellipsis: true,\n      editable: true,\n      render: (address => (\n        <Tooltip placement=\"topLeft\" title={address}>\n          {address}\n        </Tooltip>)),\n    },\n    {\n      title: '',\n      key: '5',\n      render: operationsCol,\n    },\n\n  ];\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: (record) => ({\n        record,\n        inputType: col.dataIndex,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n  return (\n    <Form form={form} component={false}>\n      <Table\n        components={{\n          body: {\n            cell: EditableCell\n          }\n        }}\n        bordered\n        dataSource={data}\n        columns={mergedColumns}\n        rowClassName=\"editable-row\"\n        pagination={{\n          onChange: cancel\n        }}\n      />\n    </Form>\n  );\n};\n\nexport default EditableTable;"],"mappings":"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"},"metadata":{},"sourceType":"module"}